import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score,silhouette_samples
from sklearn.cluster import KMeans

df = pd.read_csv('Mall_Customers.csv')

df.head()

df.info()

df.shape

df.dtypes

df = df.drop('CustomerID',axis = 1)

df.info()

df_num = df.drop(['Gender'], axis = 1)

fig, ax = plt.subplots(nrows = 1, ncols = 3, figsize=(15, 4))

for variable, subplot in zip(df_num.columns, ax.flatten()):
    
    sns.boxplot(df[variable], ax = subplot)

plt.show()

Total = df.isnull().sum().sort_values(ascending=False)          

Percent = (df.isnull().sum()*100/df.isnull().count()).sort_values(ascending=False)   

missing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    
missing_data

wcss  = []

for i in range(1,21):
    kmeans = KMeans(n_clusters = i, random_state = 10)
    kmeans.fit(df_num)
    wcss.append(kmeans.inertia_)

plt.plot(range(1,21), wcss)

plt.title('Elbow Plot', fontsize = 15)
plt.xlabel('No. of clusters (K)', fontsize = 15)
plt.ylabel('WCSS', fontsize = 15)

plt.show()

plt.plot(range(1,21), wcss)

plt.title('Elbow Plot', fontsize = 15)
plt.xlabel('No. of clusters (K)', fontsize = 15)
plt.ylabel('WCSS', fontsize = 15)

plt.axvline(x = 5, color = 'red')

plt.show()

n_clusters = [2, 3, 4, 5, 6]

    cluster = KMeans (n_clusters= K, random_state= 10)
    predict = cluster.fit_predict(df_num)
    score = silhouette_score(df_num, predict, random_state= 10)
    print ("For {} clusters the silhouette score is {})".format(K, score))

n_clusters = [2, 3, 4, 5, 6]

df_num= np.array(df_num)

for K in n_clusters:
    
    fig, (ax1, ax2) = plt.subplots(1, 2)
    
    fig.set_size_inches(18, 7)

    model = KMeans(n_clusters = K, random_state = 10)
    
    cluster_labels = model.fit_predict(df_num)

    silhouette_avg = silhouette_score(df_num, cluster_labels)
    
    sample_silhouette_values = silhouette_samples(df_num, cluster_labels)

    y_lower = 10
    for i in range(K):
      
        ith_cluster_silhouette_values = sample_silhouette_values[cluster_labels == i]
        
        ith_cluster_silhouette_values.sort()
      
        size_cluster_i = ith_cluster_silhouette_values.shape[0]
        y_upper = y_lower + size_cluster_i

        color = cm.nipy_spectral(float(i) / K)
        ax1.fill_betweenx(np.arange(y_lower, y_upper),
                          0, ith_cluster_silhouette_values,
                          facecolor=color, edgecolor=color, alpha=0.7)

        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))

  
        y_lower = y_upper + 10 

    ax1.set_title("Silhouette Plot")
    ax1.set_xlabel("Silhouette coefficient")
    ax1.set_ylabel("Cluster label")

    ax1.axvline(x=silhouette_avg, color="red", linestyle="--")

    ax1.set_yticks([])  
  
    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8])

    
    colors = cm.nipy_spectral(cluster_labels.astype(float) / K)
    
    ax2.scatter(df_num[:, 0], df_num[:, 1], marker='.', s=30, lw=0, alpha=0.7, c=colors, edgecolor='k')

    centers = model.cluster_centers_
    
    for i, c in enumerate(centers):
        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=50, edgecolor='k')
    
    ax2.set_title("Clusters")
    ax2.set_xlabel("Spending Score")
    ax2.set_ylabel("Annual Income")
    
    plt.suptitle(("Silhouette Analysis for K-Means Clustering with n_clusters = %d" % K), fontsize=14, 
                 fontweight='bold')

plt.show()

new_clusters = KMeans(n_clusters = 5, random_state = 10)

new_clusters.fit(df_num)

df['Cluster'] = new_clusters.labels_

df.head()

df.Cluster.value_counts()

sns.countplot(data= df, x = 'Cluster')

plt.title('Size of Cluster', fontsize = 15)
plt.xlabel('Clusters', fontsize = 15)
plt.ylabel('Number of Customers', fontsize = 15)

plt.text(x = -0.05, y =39, s = np.unique(new_clusters.labels_, return_counts=True)[1][0])
plt.text(x = 0.95, y =24, s = np.unique(new_clusters.labels_, return_counts=True)[1][1])
plt.text(x = 1.95, y =37, s = np.unique(new_clusters.labels_, return_counts=True)[1][2])
plt.text(x = 2.95, y =22, s = np.unique(new_clusters.labels_, return_counts=True)[1][3])
plt.text(x = 3.95, y =81, s = np.unique(new_clusters.labels_, return_counts=True)[1][4])


plt.show()

sns.lmplot(x = 'Spending Score (1-100)', y = 'Annual Income (k$)', data = df, hue = 'Cluster', 
                markers = ['*', ',', '^', '.', '+'], fit_reg = False)

plt.title('K-means Clustering (for K=5)', fontsize = 15)
plt.xlabel('Spending Score', fontsize = 15)
plt.ylabel('Annual Income', fontsize = 15)

plt.show()

len(df[df['Cluster'] == 0])

df[df.Cluster==0].describe()

df[df.Cluster==0].describe(include = object)

len(df[df['Cluster'] == 1])

df[df.Cluster==1].describe()

df[df.Cluster==1].describe(include = object)

len(df[df['Cluster'] == 2])

df[df.Cluster==2].describe()

df[df.Cluster==2].describe(include = object)

len(df[df['Cluster'] == 3])

df[df.Cluster==3].describe()

df[df.Cluster==3].describe(include = object)

len(df[df['Cluster'] == 4])

df[df.Cluster==4].describe()

df[df.Cluster==4].describe(include = object)
